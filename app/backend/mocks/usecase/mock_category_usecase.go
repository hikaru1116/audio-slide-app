// Code generated by MockGen. DO NOT EDIT.
// Source: category_usecase.go
//
// Generated by this command:
//
//	mockgen -source=category_usecase.go -destination=../../mocks/usecase/mock_category_usecase.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "audio-slide-app/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICategoryUseCase is a mock of ICategoryUseCase interface.
type MockICategoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryUseCaseMockRecorder
	isgomock struct{}
}

// MockICategoryUseCaseMockRecorder is the mock recorder for MockICategoryUseCase.
type MockICategoryUseCaseMockRecorder struct {
	mock *MockICategoryUseCase
}

// NewMockICategoryUseCase creates a new mock instance.
func NewMockICategoryUseCase(ctrl *gomock.Controller) *MockICategoryUseCase {
	mock := &MockICategoryUseCase{ctrl: ctrl}
	mock.recorder = &MockICategoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryUseCase) EXPECT() *MockICategoryUseCaseMockRecorder {
	return m.recorder
}

// GetCategories mocks base method.
func (m *MockICategoryUseCase) GetCategories(ctx context.Context) ([]*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockICategoryUseCaseMockRecorder) GetCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockICategoryUseCase)(nil).GetCategories), ctx)
}
