// Code generated by MockGen. DO NOT EDIT.
// Source: quiz_usecase.go
//
// Generated by this command:
//
//	mockgen -source=quiz_usecase.go -destination=../../mocks/usecase/mock_quiz_usecase.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "audio-slide-app/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIQuizUseCase is a mock of IQuizUseCase interface.
type MockIQuizUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIQuizUseCaseMockRecorder
	isgomock struct{}
}

// MockIQuizUseCaseMockRecorder is the mock recorder for MockIQuizUseCase.
type MockIQuizUseCaseMockRecorder struct {
	mock *MockIQuizUseCase
}

// NewMockIQuizUseCase creates a new mock instance.
func NewMockIQuizUseCase(ctrl *gomock.Controller) *MockIQuizUseCase {
	mock := &MockIQuizUseCase{ctrl: ctrl}
	mock.recorder = &MockIQuizUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuizUseCase) EXPECT() *MockIQuizUseCaseMockRecorder {
	return m.recorder
}

// GetQuizByID mocks base method.
func (m *MockIQuizUseCase) GetQuizByID(ctx context.Context, id string) (*model.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizByID", ctx, id)
	ret0, _ := ret[0].(*model.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizByID indicates an expected call of GetQuizByID.
func (mr *MockIQuizUseCaseMockRecorder) GetQuizByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizByID", reflect.TypeOf((*MockIQuizUseCase)(nil).GetQuizByID), ctx, id)
}

// GetQuizzesByCategory mocks base method.
func (m *MockIQuizUseCase) GetQuizzesByCategory(ctx context.Context, category string, count int) ([]*model.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizzesByCategory", ctx, category, count)
	ret0, _ := ret[0].([]*model.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizzesByCategory indicates an expected call of GetQuizzesByCategory.
func (mr *MockIQuizUseCaseMockRecorder) GetQuizzesByCategory(ctx, category, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizzesByCategory", reflect.TypeOf((*MockIQuizUseCase)(nil).GetQuizzesByCategory), ctx, category, count)
}
