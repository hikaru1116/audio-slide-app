// Code generated by MockGen. DO NOT EDIT.
// Source: category_repository.go
//
// Generated by this command:
//
//	mockgen -source=category_repository.go -destination=../../mocks/repository/mock_category_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "audio-slide-app/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICategoryRepository is a mock of ICategoryRepository interface.
type MockICategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockICategoryRepositoryMockRecorder is the mock recorder for MockICategoryRepository.
type MockICategoryRepositoryMockRecorder struct {
	mock *MockICategoryRepository
}

// NewMockICategoryRepository creates a new mock instance.
func NewMockICategoryRepository(ctrl *gomock.Controller) *MockICategoryRepository {
	mock := &MockICategoryRepository{ctrl: ctrl}
	mock.recorder = &MockICategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryRepository) EXPECT() *MockICategoryRepositoryMockRecorder {
	return m.recorder
}

// GetCategoriesToData mocks base method.
func (m *MockICategoryRepository) GetCategoriesToData(ctx context.Context) ([]*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesToData", ctx)
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesToData indicates an expected call of GetCategoriesToData.
func (mr *MockICategoryRepositoryMockRecorder) GetCategoriesToData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesToData", reflect.TypeOf((*MockICategoryRepository)(nil).GetCategoriesToData), ctx)
}
