// Code generated by MockGen. DO NOT EDIT.
// Source: quiz_repository.go
//
// Generated by this command:
//
//	mockgen -source=quiz_repository.go -destination=../../mocks/repository/mock_quiz_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "audio-slide-app/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIQuizRepository is a mock of IQuizRepository interface.
type MockIQuizRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIQuizRepositoryMockRecorder
	isgomock struct{}
}

// MockIQuizRepositoryMockRecorder is the mock recorder for MockIQuizRepository.
type MockIQuizRepositoryMockRecorder struct {
	mock *MockIQuizRepository
}

// NewMockIQuizRepository creates a new mock instance.
func NewMockIQuizRepository(ctrl *gomock.Controller) *MockIQuizRepository {
	mock := &MockIQuizRepository{ctrl: ctrl}
	mock.recorder = &MockIQuizRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuizRepository) EXPECT() *MockIQuizRepositoryMockRecorder {
	return m.recorder
}

// GetQuizByIDToData mocks base method.
func (m *MockIQuizRepository) GetQuizByIDToData(ctx context.Context, id string) (*model.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizByIDToData", ctx, id)
	ret0, _ := ret[0].(*model.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizByIDToData indicates an expected call of GetQuizByIDToData.
func (mr *MockIQuizRepositoryMockRecorder) GetQuizByIDToData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizByIDToData", reflect.TypeOf((*MockIQuizRepository)(nil).GetQuizByIDToData), ctx, id)
}

// GetQuizzesByCategoryToData mocks base method.
func (m *MockIQuizRepository) GetQuizzesByCategoryToData(ctx context.Context, category string, count int) ([]*model.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizzesByCategoryToData", ctx, category, count)
	ret0, _ := ret[0].([]*model.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizzesByCategoryToData indicates an expected call of GetQuizzesByCategoryToData.
func (mr *MockIQuizRepositoryMockRecorder) GetQuizzesByCategoryToData(ctx, category, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizzesByCategoryToData", reflect.TypeOf((*MockIQuizRepository)(nil).GetQuizzesByCategoryToData), ctx, category, count)
}
